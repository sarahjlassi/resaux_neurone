# -*- coding: utf-8 -*-
"""Resau_neurone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nO1YwAjdFJFNXnGyOfRLRI_fie33SCm
"""

!pip install tensorflow 2.0.0

import pandas as pd
import numpy as np
import os
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import RMSprop

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np 
import imghdr
data_dir = '/content/drive/MyDrive/datset/test' 
image_exts = ['jpeg','jpg', 'bmp', 'png']
for image_class in os.listdir(data_dir): 
    for image in os.listdir(os.path.join(data_dir, image_class)):
        image_path = os.path.join(data_dir, image_class, image)
        try: 
            img = cv2.imread(image_path)
            tip = imghdr.what(image_path)
            if tip not in image_exts: 
                print('Image not in ext list {}'.format(image_path))
                os.remove(image_path)
        except Exception as e: 
            print('Issue with image {}'.format(image_path))
            os.remove(image_path)

#Train datset
normal_train_dir = os.path.join('/content/drive/MyDrive/datset/train/normal')
ben_train_dir = os.path.join('/content/drive/MyDrive/datset/train/BEN')
can_train_dir = os.path.join('/content/drive/MyDrive/datset/train/CAN')

normal=os.listdir(normal_train_dir)
ben=os.listdir(ben_train_dir)
can=os.listdir(can_train_dir)

print(' normal images:', len(normal))
print(' ben images:', len(ben))
print(' can images:', len(can))

nrows = 10
ncols = 10
fig = plt.gcf()
fig.set_size_inches(ncols * 10, nrows * 10)
n = [os.path.join(normal_train_dir, fname) for fname in normal[:10]]
b = [os.path.join(ben_train_dir, fname) for fname in ben[:10]]
m = [os.path.join(can_train_dir, fname) for fname in can[:10]]



print ("Affichage de qlq cellule normale")
print()
for i, img_path in enumerate(n):
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') # Don't show axes (or gridlines)
  img = mpimg.imread(img_path)
  plt.imshow(img, cmap='Greys_r')

plt.show()

print()
print ("Affichage de qlq cellule benign")
fig = plt.gcf()
fig.set_size_inches(ncols * 10, nrows * 10)
for i, img_path in enumerate(b):
  sp = plt.subplot(nrows, ncols, i+1)
  sp.axis('Off')
  img = mpimg.imread(img_path)
  plt.imshow(img, cmap='Greys_r')

plt.show()

print()
print ("Affichage de qlq cellule malignant")
fig = plt.gcf()
fig.set_size_inches(ncols * 10, nrows * 10)
print()
for i, img_path in enumerate(m):
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('Off') 
  img = mpimg.imread(img_path)
  plt.imshow(img, cmap='Greys_r')

plt.show()

train = ImageDataGenerator(rescale = 1/255)
validation = ImageDataGenerator(rescale = 1/255)

train_dataset = train.flow_from_directory("/content/drive/MyDrive/datset/train",
                                          target_size = (200, 200),
                                          batch_size = 64,
                                          class_mode = 'binary'
                                        )

test_dataset = validation.flow_from_directory("/content/drive/MyDrive/datset/test",
                                          target_size = (200, 200),
                                          batch_size = 32,
                                          class_mode = 'binary'
                                        )

train_dataset.class_indices

train_dataset.classes

model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16, (3,3), activation = 'relu', input_shape =(200, 200, 3)), tf.keras.layers.MaxPool2D(2,2), #
                                    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'),#
                                    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),#
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(512, activation = 'relu'),#
                                    tf.keras.layers.Dense(1, activation='sigmoid')
                                    ])

# Optimizer and compilation : ya3ni bech nrani l model mete3i
from tensorflow.python import metrics
model.compile(loss = 'binary_crossentropy', optimizer = tf.keras.optimizers.RMSprop(lr=0.001), metrics = ["accuracy"])

#yaffichili descri 3el mod
model.summary()

# Training
model_fit = model.fit(train_dataset,
                      epochs = 1,
                      validation_data =test_dataset
                      )

img = image.load_img("/content/drive/MyDrive/datset/train/normal/2766.png", target_size = (200,200))
plt.imshow(img)
plt.show()
X= image.img_to_array(img)
X = np.expand_dims(X, axis = 0)
images = np.vstack([X])
val = model.predict(images)
if(val == 0):
  print("Normal")
elif(val == 1):
  print("benign")
else:
  print("malignant")

fig = plt.figure()
plt.plot(model_fit.history['accuracy'], color='red', label='accuracy')
plt.plot(model_fit.history['val_accuracy'], color='orange', label='val_accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.legend(loc="upper left")
plt.show()

!pip install pillow
!pip3 install anvil-uplink

import anvil.server
anvil.server.connect("RXQKER736DPDZYNEQM2ROREM-DIM6HONJWNMEKLTP")

import anvil.media
from tensorflow.keras.utils import load_img
from tensorflow.keras.utils import img_to_array
from PIL import Image
import PIL.Image
@anvil.server.callable
def classify_image(file) :
  with anvil.media.TempFile(file) as filename:
    img = load_img(filename)
    img = img.resize((200,200) ,resample=PIL.Image.BICUBIC) 
    arr= img_to_array(img)
    arr= np.expand_dims(arr, axis=0)
    arr /=255.0

    val=model.predict(arr)

    return ( 'Normal' if val==0 else 'Benign' if val==1 else 'Malignant', float(val))